name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - { name: '3.11', version: '3.11', os: ubuntu-latest, tox: py311 }
          - { name: '3.10', version: '3.10', os: ubuntu-latest, tox: py310 }
          - { name: '3.9', version: '3.9', os: ubuntu-latest, tox: py39 }
          - { name: '3.8', version: '3.8', os: ubuntu-latest, tox: py38 }
          - { name: Windows, version: '3.11', os: windows-latest, tox: py311 }
          - { name: Mac, version: '3.11', os: macos-latest, tox: py311 }
    env:
      POETRY_VERSION: 1.3.2
      POETRY_VIRTUALENVS_IN_PROJECT: true
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}

      # =========================
      # Install Dependencies
      # =========================

      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: pip-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: pip-${{ runner.os }}-${{ env.POETRY_VERSION }}-

      - name: Install Dependencies
        run: |
          pip install -U pip poetry==${{ env.POETRY_VERSION }}
          poetry export --only dev --without-hashes | grep 'tox==' > requirements.txt
          pip install -r requirements.txt

      # ==============
      # Run tests
      # ==============

      - name: Load cached test environment
        uses: actions/cache@v3
        with:
          path: .tox
          key: tox-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('poetry.lock') }}-${{ hashFiles('tox.ini') }}
          restore-keys: tox-${{ runner.os }}-${{ env.POETRY_VERSION }}-

      - name: Run tests
        run: tox -e ${{ matrix.tox }}

      - name: Upload Coverage to Codecov
        if: matrix.name == '3.11'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
