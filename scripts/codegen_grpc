#!/usr/bin/env python3
import os
import re
from pathlib import Path

import click
from grpc_tools import protoc

input_pkg = "easyflake.grpc.protos"
output_pkg = "easyflake.grpc.protobuf"

proj_dir = Path(__file__).parent.parent


def _get_relpath(pkg: str):
    abspath = os.path.join(proj_dir, *pkg.split("."))
    return os.path.relpath(abspath, ".")


input_dir = _get_relpath(input_pkg)
output_dir = _get_relpath(output_pkg)


def _get_files():
    return [
        os.path.join(output_dir, f)
        for f in os.listdir(output_dir)
        if not f.startswith("_") and os.path.isfile(os.path.join(output_dir, f))
    ]


def main():
    # remove exist files
    question = f"Do you want to remove existing files in {output_dir}?"
    if len(remove_files := _get_files()) > 0 and not click.confirm(question):
        for file in remove_files:
            os.remove(file)
        click.echo("existing files have been removed")

    # codegen
    click.echo("generating protobuf files")
    input_files = os.listdir(input_dir)
    protoc.main(
        (
            "",
            f"-I{input_dir}",
            f"--python_out={output_dir}",
            f"--pyi_out={output_dir}",
            f"--grpc_python_out={output_dir}",
            *input_files,
        )
    )
    click.echo("protobuf files have been generated")

    # patch: fix to relative import
    for file in _get_files():
        with open(file, "r+") as fp:
            origin = fp.read()
            fp.seek(0)

            content = re.sub(
                r"^(import [\w\.]+_pb2\w* as [\w\.]+_pb2\w*)$",
                rf"from {output_pkg} \1",
                origin,
                flags=re.MULTILINE,
            )

            if origin != content:
                click.echo(f"rewrite {file}")
                fp.write(content)

    click.echo("finished")


if __name__ == "__main__":
    main()
